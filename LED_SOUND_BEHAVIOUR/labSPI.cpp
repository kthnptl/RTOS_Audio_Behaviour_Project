/////////////////////////////////////////////////////////////////////////////////////////////////////
// Author:          Alan Chen                                                        updated 5-20-18
// Course:          CMPE244
// Assignment:      SPI
// Instructor:      Preetpal Kang
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "labSPI.h"
SemaphoreHandle_t spi_bus_lock = xSemaphoreCreateMutex();

labSPI::labSPI(Peripheral spiNum):
    sspNum(spiNum)
{
    uint32_t sspMem[] = {LPC_SSP0_BASE, LPC_SSP1_BASE};
    SSPtr = (LPC_SSP_TypeDef *)sspMem[spiNum];
}

bool labSPI::init(uint8_t data_size_select, FrameModes format, uint8_t divide)
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    //SC (system control)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////PCONP (power control register)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////bit 8         : SPI
    ////bit 10        : SSP1
    ////bit 21        : SSP0
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////PCLKSEL0 (clk selection)                        PCLKSEL1
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////bit 16 - 17   : SPI                             //bit 10 - 11   : SSP0
    ////bit 20 - 21   : SSP1
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if(sspNum == SSP0)
    {
        LPC_SC->PCONP       |= (0b1  << 21);        //power ssp0
        LPC_SC->PCLKSEL1    |= (0b11 << 10);        //pclk = cclk/8
        u0_dbg_printf("SSP0 powered & clk init\n");
    }
    else if (sspNum == SSP1)
    {
        LPC_SC->PCONP       |= (0b1  << 10);        //power ssp1
        LPC_SC->PCLKSEL0    |= (0b11 << 20);        //pclk = cclk/8
        u0_dbg_printf("SSP1 powered & clk init\n");
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //PINCON (pin connect block)
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////PINSEL0
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////bit 14 - 15   : SCK1 if "10" 
    ////bit 16 - 17   : MISO1 if "10"
    ////bit 18 - 19   : MOSI1 if "10"
    ////bit 30 - 31   : SCK0 if "10"
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////PINSEL1
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////bit 2 - 3     : MOSI0 if "10"
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if(sspNum == SSP1)
    {
        LPC_PINCON->PINSEL0 &= ~(0x3F << 14);
        LPC_PINCON->PINSEL0 |= 0x22 << 14;          //0x2A for input
    }
    
    else if(sspNum == SSP0)
    {
        LPC_PINCON->PINSEL0 &= ~(0x3 << 30);
        LPC_PINCON->PINSEL1 &= ~(0x3 << 2);
        LPC_PINCON->PINSEL0 |= 0x2 << 30;
        LPC_PINCON->PINSEL1 |= 0x2 << 2;
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    //CR0 (control 0) Register
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // bit 0 - 3    : transfer rate (data_size_select - 1) 0b0011 - 4, 5 - 0b0100 
    // bit 4 - 5    : frame format 00 - SPI, 01 - TI, 10 - Microwire, 11 - n/a
    // bit 6        : CPOL - clock out polarity
    // bit 7        : CHPA - clock out phase
    // bit 8 - 15   : SCR - serial clk rate (PCLK / [CPSDVSR*[SCR+1]])
    // bit 16 - 31  : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////
    SSPtr->CR0 = (data_size_select-1) + (format << 4) + (0b00 << 6);
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // CPSR (clock pre-scale) Register
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // bit 0 - 7    : pre-scaler from 2 to 254 
    // bit 8 - 31   : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if(divide < 2)
    {
        divide = 2;
    }
    else if(divide%2 == 1)
    {
        SSPtr->CPSR = divide-1;
    }
    else
    {
        SSPtr->CPSR = divide;
    }

    /*
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // DMACR (DMA control)Register
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // bit 0        : Receive  DMA enable
    // bit 1        : Transmit DMA enable
    // bit 2 - 31   : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////
    SSPtr->DMACR = 
    */
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    //CR1 (control 1) Register 
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // bit 0        : LBM - loop back mode
    // bit 1        : SSE - SSP enable
    // bit 2        : MS - master (0) /slave mode (1)
    // bit 3        : SOD - slave output disable
    // bit 4 - 31   : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////
    SSPtr->CR1  = (0<<2);           //master mode
    SSPtr->CR1 |= (1<<1);           //enable SSP
    
    return 1;                       //return TRUE if initialized properly
}

uint8_t labSPI::transfer(uint8_t send)
{
    ///////////////////////////////////////////////////////////////////////////////////////////////
    //DR Register
    ///////////////////////////////////////////////////////////////////////////////////////////////    
    // bit 0 - 15   : SEND/READ data
    // bit 16 - 31  : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////  
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // SR Register
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // bit 0        : TFE - transmit FIFO empty    - "1" Tx FIFO is empty
    // bit 1        : TNF - transmit FIFO not full - "0" Tx FIFO is full
    // bit 2        : RNE - receive FIFO not empty - "0" Rx FIFO is empty
    // bit 3        : RFF - receive FIFO is full   - "1" Rx FIFO is full
    // bit 4        : BSY - busy                   - "0" SSPn is idle
    // bit 5 - 31   : reserved
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if(xSemaphoreTake(spi_bus_lock, 100))
    {
        SSPtr->DR = send;
        while(SSPtr->SR & (1 << 4)){}

        xSemaphoreGive(spi_bus_lock);
    }
    return SSPtr->DR;                   //return true for transfer complete
}

labSPI::~labSPI(void)
{

}
